{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://s3.amazonaws.com/ByC_logo_prod/unit-26963.jpg\" alt=\"Alt text that describes the graphic\" width=\"600\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Accident Outcomes in New York City\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Table of contents\n",
    "\n",
    "- [Abstract](#Abstract)\n",
    "- [Introduction](#Introduction)\n",
    "- [1. The problem](#1.-The-problem)\n",
    "- [2. Purpose of the study](#2.-Purpose-of-the-study)\n",
    "- [3. Project description](#3.-Project-description)\n",
    "    - [3.1 Hypothesis](#3.1-Hypothesis)\n",
    "    - [3.2 Workflow](#3.2-Workflow)\n",
    "    - [3.3 Methods](#3.3-Methods)\n",
    "    - [3.4Analysis](#3.4-Analysis)\n",
    "        - [Data Exploration and Cleaning](#Data-Exploration-and-Cleaning)\n",
    "            - [Creating Target Variable](#Creating-Target-Variable) \n",
    "            - [Data Imbalance](#Data-Imbalance)\n",
    "            - [Preparing to Train Models](#Preparing-to-Train-Models)\n",
    "        - [Model Training and Evaluation](#Model-Training-and-Evaluation)\n",
    "            - [Training](#Training)\n",
    "            - [Evaluation](#Evaluation)\n",
    "            - [Model Tuning](#Model-Tuning)\n",
    "    - [3.5 Results](#3.5-Results)\n",
    "- [4. Implementation (optional)](#4.-Implementation-(optional))\n",
    "- [Conclusion](#Conclusion)\n",
    "- [References](#References)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Abstract\n",
    "\n",
    "New York City roadways contain over 218,000 traffic incidents per year with over $1000 in damage. These vary in their level of severity to vehicle occupants and consume a large portion of the NYPD's time. Recently the NYPD chose to halt responding to low level traffic incidents in a small part of NYC to test how it can help free up officers to complete other tasks. Using publicly available data on accidents in New York City and daily weather information, it is not possible to leverage machine learning to provide a better picture to police departments of traffic incidents to prioritize response."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "Introduce your project. Describe all the processes you followed to solve the problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. The problem\n",
    "\n",
    "A recent New York Times study found that on average 16% of an officers time is spent on traffic related issues. As cities across the nation start to look at altering the budgets of police departments, options need to be found that can maintain service level while decreasing cost. Clearly, a good starting point is responding to traffic incidents. Using a system of networked cameras and machine learning, dispatchers should be able to more effectively guide officers to traffic incidents requiring attention.  \n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Purpose of the study\n",
    "\n",
    "When making the case for lowering police budgets it is hard to convince people that crime is an area which cna have it's funded reduced. One area that shows potential for saving officer's time are traffic incidents. A vast majority of the incidents on the road are non life-threatening. As such, the NYPD have even began a pilot study, not responding to minor traffic incidents in the borough of Staten Island. Responding to non-severe vehicle incidents draws resources away from the myriad of other issues the NYPD is tasked with handling. This is a problem I believe can be handled in some part by machine learning. Using the years of compiled accident and weather data, combined with a system of cameras on the roadways, a model can be constructed to guide officers and dispatchers towards only the neccessary incidents. Thus allowing for less personal and more availble time to handle larger crime related issues.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Project description\n",
    "\n",
    "The goal of this project is to determine the viability of a model trained solely on observational data, at predicting the outcome of an accident. The delineation for this study is whether an accident contains an injury/death or not. If viable the model would be used in tandem with a system of networked cameras that consistenly monitor the roadways. Upon recognizing a crash this model can be used to decide the dispatch priority. For example, if the model does not determine that an injury occured then officers can be dispatched to another call with higher priority.  \n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 Hypothesis\n",
    "\n",
    "Police response to traffic incidents can be effictively prioritzed by a machine learning algorithm which predicts the outcome of a traffic accident using only observational data that can be collected by a camera and has an accuracy and recall of greater than 90%.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Workflow\n",
    "\n",
    "What's the process you are going to follow to solve the problem based on the Problem-Solving Framework:\n",
    "\n",
    "- Define the problem \n",
    "- Map the system \n",
    "- Define suitable metrics \n",
    "- Select modeling tools \n",
    "- Implement model  \n",
    "- Evaluate model \n",
    "- Deploy the final model \n",
    "\n",
    "Police Department resources can be more effectively dispatched regarding traffic incidents. Machine learning can successfuly classify the outcome of traffic incidents.\n",
    "\n",
    "I will use NYC Traffic Accident Data and NOAA Daily weather data combined to predict if an accident will result in injury or death.\n",
    "\n",
    "While accuracy of the model is very important I am especially concerned with the recall of the model. When dealing with injury or death it is important to be wrong by guessing more injuries than not. I am willing to sacrifice accuracy, if the model is biased towards injury or death.\n",
    "\n",
    "Most of the features in this dataset are categorical lending this to a classification problem. Considering the wide range of the features I believe 4 traditional classification algorithms will work best. I have chosen a Decision Tree Classifier, Gaussian Naieve-Bayes Classifier, Random Forest Classifier and a K-Nearest Neighbors Cassifier.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Methods\n",
    "\n",
    "Four different models will be trained and compared on their recall and accuracy. The foour models chosen are a Decison Tree, Gaussian Naive-Bayes, Random Forest, and K-Nearest Neighbors. \n",
    "\n",
    "Each model excels in classification problems. The data input into the model contains descriptions of the accident. Examples include:\n",
    "    - How Many Vehicles?\n",
    "    - What type of vehicle is involved?\n",
    "    - What part of the city did it take place?\n",
    "    \n",
    "By grouping this data and comparing it to similar instances the models can decide if a current accident caused harm.\n",
    "\n",
    "One challenge with the dataset was the heavy imbalance between harmful and non-harmful accidents. To gain a better sense of the models accuracy and recall Random Underdampling was applied to remove large amounts of the majority class. This left over 166,000 samples per result. A far cry from the 1.32 million in the dataset but a reasonable number to train the models.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.4 Analysis \n",
    "\n",
    "Spend some time analysing your models, data and processes.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Exploration and Cleaning\n",
    "\n",
    "The datasets, NYC Motor Vehicle Collision Data and Historical Weather Data, are read into a dataframe and checked. Each data frame had extraneous material removed. This included weather data with of 60% of the data missing and vehicle information that was incomprehensible.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from warnings import filterwarnings\n",
    "\n",
    "filterwarnings('ignore')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df = pd.read_csv('Motor_Vehicle_Collisions_-_Crashes.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_df = pd.read_csv('Weather_Data_NY_2014_2019.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1752035 entries, 0 to 1752034\n",
      "Data columns (total 29 columns):\n",
      " #   Column                         Dtype  \n",
      "---  ------                         -----  \n",
      " 0   CRASH DATE                     object \n",
      " 1   CRASH TIME                     object \n",
      " 2   BOROUGH                        object \n",
      " 3   ZIP CODE                       object \n",
      " 4   LATITUDE                       float64\n",
      " 5   LONGITUDE                      float64\n",
      " 6   LOCATION                       object \n",
      " 7   ON STREET NAME                 object \n",
      " 8   CROSS STREET NAME              object \n",
      " 9   OFF STREET NAME                object \n",
      " 10  NUMBER OF PERSONS INJURED      float64\n",
      " 11  NUMBER OF PERSONS KILLED       float64\n",
      " 12  NUMBER OF PEDESTRIANS INJURED  int64  \n",
      " 13  NUMBER OF PEDESTRIANS KILLED   int64  \n",
      " 14  NUMBER OF CYCLIST INJURED      int64  \n",
      " 15  NUMBER OF CYCLIST KILLED       int64  \n",
      " 16  NUMBER OF MOTORIST INJURED     int64  \n",
      " 17  NUMBER OF MOTORIST KILLED      int64  \n",
      " 18  CONTRIBUTING FACTOR VEHICLE 1  object \n",
      " 19  CONTRIBUTING FACTOR VEHICLE 2  object \n",
      " 20  CONTRIBUTING FACTOR VEHICLE 3  object \n",
      " 21  CONTRIBUTING FACTOR VEHICLE 4  object \n",
      " 22  CONTRIBUTING FACTOR VEHICLE 5  object \n",
      " 23  COLLISION_ID                   int64  \n",
      " 24  VEHICLE TYPE CODE 1            object \n",
      " 25  VEHICLE TYPE CODE 2            object \n",
      " 26  VEHICLE TYPE CODE 3            object \n",
      " 27  VEHICLE TYPE CODE 4            object \n",
      " 28  VEHICLE TYPE CODE 5            object \n",
      "dtypes: float64(4), int64(7), object(18)\n",
      "memory usage: 387.6+ MB\n"
     ]
    }
   ],
   "source": [
    "v_crash_df\n",
    "v_crash_df.info() #check the datatypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2191 entries, 0 to 2190\n",
      "Data columns (total 26 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   Unnamed: 0  2191 non-null   int64  \n",
      " 1   STATION     2191 non-null   object \n",
      " 2   NAME        2191 non-null   object \n",
      " 3   LATITUDE    2191 non-null   float64\n",
      " 4   LONGITUDE   2191 non-null   float64\n",
      " 5   ELEVATION   2191 non-null   float64\n",
      " 6   DATE        2191 non-null   object \n",
      " 7   AWND        2025 non-null   float64\n",
      " 8   PGTM        1 non-null      float64\n",
      " 9   PRCP        2191 non-null   float64\n",
      " 10  SNOW        2190 non-null   float64\n",
      " 11  SNWD        2191 non-null   float64\n",
      " 12  TAVG        0 non-null      float64\n",
      " 13  TMAX        2191 non-null   int64  \n",
      " 14  TMIN        2191 non-null   int64  \n",
      " 15  TSUN        1 non-null      float64\n",
      " 16  WDF2        2028 non-null   float64\n",
      " 17  WDF5        2014 non-null   float64\n",
      " 18  WSF2        2028 non-null   float64\n",
      " 19  WSF5        2014 non-null   float64\n",
      " 20  WT01        790 non-null    float64\n",
      " 21  WT02        46 non-null     float64\n",
      " 22  WT03        55 non-null     float64\n",
      " 23  WT04        5 non-null      float64\n",
      " 24  WT06        14 non-null     float64\n",
      " 25  WT08        435 non-null    float64\n",
      "dtypes: float64(20), int64(3), object(3)\n",
      "memory usage: 445.2+ KB\n"
     ]
    }
   ],
   "source": [
    "weather_df\n",
    "weather_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 2191 entries, 2014-01-01 to 2019-12-31\n",
      "Data columns (total 15 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   Unnamed: 0  2191 non-null   int64  \n",
      " 1   AWND        2191 non-null   float64\n",
      " 2   PRCP        2191 non-null   float64\n",
      " 3   SNOW        2191 non-null   float64\n",
      " 4   SNWD        2191 non-null   float64\n",
      " 5   TMAX        2191 non-null   int64  \n",
      " 6   TMIN        2191 non-null   int64  \n",
      " 7   WDF2        2191 non-null   float64\n",
      " 8   WSF2        2191 non-null   float64\n",
      " 9   WT01        2191 non-null   float64\n",
      " 10  WT02        2191 non-null   float64\n",
      " 11  WT03        2191 non-null   float64\n",
      " 12  WT04        2191 non-null   float64\n",
      " 13  WT06        2191 non-null   float64\n",
      " 14  WT08        2191 non-null   float64\n",
      "dtypes: float64(12), int64(3)\n",
      "memory usage: 273.9 KB\n"
     ]
    }
   ],
   "source": [
    "weather_df[\"DATE\"] = pd.to_datetime(weather_df[\"DATE\"])\n",
    "weather_df.set_index('DATE',inplace=True)\n",
    "weather_df.drop(['STATION','NAME','ELEVATION','TSUN','PGTM','TAVG','LATITUDE','LONGITUDE'],\n",
    "                axis=1,inplace=True)\n",
    "weather_df.drop(columns=['WDF5',\"WSF5\"],inplace=True)\n",
    "weather_df.fillna(0,axis=1,inplace=True)\n",
    "weather_df.info()\n",
    "\n",
    "#cleaned up the weather data. Dropped the columns which were static, have no effect, or had lots of missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_df.drop('Unnamed: 0',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1752035 entries, 0 to 1752034\n",
      "Data columns (total 29 columns):\n",
      " #   Column                         Dtype         \n",
      "---  ------                         -----         \n",
      " 0   CRASH DATE                     datetime64[ns]\n",
      " 1   CRASH TIME                     object        \n",
      " 2   BOROUGH                        object        \n",
      " 3   ZIP CODE                       object        \n",
      " 4   LATITUDE                       float64       \n",
      " 5   LONGITUDE                      float64       \n",
      " 6   LOCATION                       object        \n",
      " 7   ON STREET NAME                 object        \n",
      " 8   CROSS STREET NAME              object        \n",
      " 9   OFF STREET NAME                object        \n",
      " 10  NUMBER OF PERSONS INJURED      float64       \n",
      " 11  NUMBER OF PERSONS KILLED       float64       \n",
      " 12  NUMBER OF PEDESTRIANS INJURED  int64         \n",
      " 13  NUMBER OF PEDESTRIANS KILLED   int64         \n",
      " 14  NUMBER OF CYCLIST INJURED      int64         \n",
      " 15  NUMBER OF CYCLIST KILLED       int64         \n",
      " 16  NUMBER OF MOTORIST INJURED     int64         \n",
      " 17  NUMBER OF MOTORIST KILLED      int64         \n",
      " 18  CONTRIBUTING FACTOR VEHICLE 1  object        \n",
      " 19  CONTRIBUTING FACTOR VEHICLE 2  object        \n",
      " 20  CONTRIBUTING FACTOR VEHICLE 3  object        \n",
      " 21  CONTRIBUTING FACTOR VEHICLE 4  object        \n",
      " 22  CONTRIBUTING FACTOR VEHICLE 5  object        \n",
      " 23  COLLISION_ID                   int64         \n",
      " 24  VEHICLE TYPE CODE 1            object        \n",
      " 25  VEHICLE TYPE CODE 2            object        \n",
      " 26  VEHICLE TYPE CODE 3            object        \n",
      " 27  VEHICLE TYPE CODE 4            object        \n",
      " 28  VEHICLE TYPE CODE 5            object        \n",
      "dtypes: datetime64[ns](1), float64(4), int64(7), object(17)\n",
      "memory usage: 387.6+ MB\n"
     ]
    }
   ],
   "source": [
    "v_crash_df['CRASH DATE']=pd.to_datetime(v_crash_df['CRASH DATE'])\n",
    "v_crash_df.info()\n",
    "#convert \"Crash Date\" to datetime object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df.drop(columns=['CROSS STREET NAME','OFF STREET NAME','COLLISION_ID','BOROUGH','LOCATION'],inplace=True)\n",
    "#dropping columns with lots of missing values and that are redundant or not tied to the outcome of an accident"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1752035 entries, 0 to 1752034\n",
      "Data columns (total 24 columns):\n",
      " #   Column                         Dtype         \n",
      "---  ------                         -----         \n",
      " 0   CRASH DATE                     datetime64[ns]\n",
      " 1   CRASH TIME                     object        \n",
      " 2   ZIP CODE                       object        \n",
      " 3   LATITUDE                       float64       \n",
      " 4   LONGITUDE                      float64       \n",
      " 5   ON STREET NAME                 object        \n",
      " 6   NUMBER OF PERSONS INJURED      float64       \n",
      " 7   NUMBER OF PERSONS KILLED       float64       \n",
      " 8   NUMBER OF PEDESTRIANS INJURED  int64         \n",
      " 9   NUMBER OF PEDESTRIANS KILLED   int64         \n",
      " 10  NUMBER OF CYCLIST INJURED      int64         \n",
      " 11  NUMBER OF CYCLIST KILLED       int64         \n",
      " 12  NUMBER OF MOTORIST INJURED     int64         \n",
      " 13  NUMBER OF MOTORIST KILLED      int64         \n",
      " 14  CONTRIBUTING FACTOR VEHICLE 1  object        \n",
      " 15  CONTRIBUTING FACTOR VEHICLE 2  object        \n",
      " 16  CONTRIBUTING FACTOR VEHICLE 3  object        \n",
      " 17  CONTRIBUTING FACTOR VEHICLE 4  object        \n",
      " 18  CONTRIBUTING FACTOR VEHICLE 5  object        \n",
      " 19  VEHICLE TYPE CODE 1            object        \n",
      " 20  VEHICLE TYPE CODE 2            object        \n",
      " 21  VEHICLE TYPE CODE 3            object        \n",
      " 22  VEHICLE TYPE CODE 4            object        \n",
      " 23  VEHICLE TYPE CODE 5            object        \n",
      "dtypes: datetime64[ns](1), float64(4), int64(6), object(13)\n",
      "memory usage: 320.8+ MB\n"
     ]
    }
   ],
   "source": [
    "v_crash_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df['CRASH TIME'] = pd.to_datetime(v_crash_df['CRASH TIME'],format='%H:%M').dt.time\n",
    "# convert the \"Crash Time\" column to datetime object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df[\"YEAR\"] = v_crash_df['CRASH DATE'].apply(lambda x: x.year)\n",
    "v_crash_df.set_index('YEAR',inplace = True)\n",
    "v_crash_df.drop([2012,2013,2020,2021],inplace = True)\n",
    "# The weather data is only available from 2014 to 2019. \n",
    "# The Crash data needed to have those extraneous years removed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Creating Target Variable\n",
    "\n",
    "The Motor Vehicle Data set needs a target feature column. This is created by checking the different injury and death columns for a value larger than 1 and chnaging the target value to one.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "def crash_map(x):\n",
    "    track_list = ['NUMBER OF PERSONS INJURED','NUMBER OF PERSONS KILLED','NUMBER OF PEDESTRIANS INJURED',\n",
    "                  'NUMBER OF PEDESTRIANS KILLED','NUMBER OF CYCLIST INJURED','NUMBER OF CYCLIST KILLED',\n",
    "                 'NUMBER OF MOTORIST INJURED','NUMBER OF MOTORIST KILLED']\n",
    "    total = 0\n",
    "    for i in track_list:\n",
    "        if x[i] == 0:\n",
    "            pass\n",
    "        else:\n",
    "            total = 1\n",
    "    return total\n",
    "# Function to iterate over the different Injury or Death columns. If a number is encounterd then update the\n",
    "# 'Injury or Death column' with a 1 otherwise no harm resulted from the incident so place a 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df['INJURY OR DEATH'] = v_crash_df.apply(crash_map,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "YEAR\n",
       "2019    0\n",
       "2014    1\n",
       "2019    1\n",
       "2014    0\n",
       "2019    0\n",
       "       ..\n",
       "2014    0\n",
       "2014    0\n",
       "2014    1\n",
       "2014    0\n",
       "2014    0\n",
       "Name: INJURY OR DEATH, Length: 1327609, dtype: int64"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v_crash_df['INJURY OR DEATH'] # Validate crash_map function worked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of Vehicle Accidents')"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(v_crash_df['INJURY OR DEATH'])\n",
    "plt.title('Distribution of Vehicle Accidents')\n",
    "# The data is imbalanced for towards crashes that do not contain an injury or death."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Data Imbalance\n",
    "\n",
    "From a human perspective the imbalance is a good thing! Roughly 81% of traffic crashes do not lead to injury or death. For machine learning algorithms this is a problem. As we prepare for training our models the data will need to be undersampled to account for this.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = v_crash_df.groupby('YEAR')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = new_df.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(data=new_df,y='INJURY OR DEATH',x=\"YEAR\")\n",
    "plt.title('Crash Distribution per Year Resulting in Injury or Death')\n",
    "plt.savefig('Crash Distribution per Year')\n",
    "\n",
    "#plotting the distribution of crashes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vehicle_clean(x):             #Function to clean up the Vehicle Code Columns. Multiple different types\n",
    "    if type(x) != str:            # and many similar vehicles written different ways. i.e. pickup truck and Pickup Truck\n",
    "        x = str(x)                # This corrects for those issues. Using Vehicle 1 because any incident requires 1 vehicle.\n",
    "    x = x.lower()\n",
    "    return x\n",
    "v_crash_df['VEHICLE TYPE CODE 1'] =  v_crash_df['VEHICLE TYPE CODE 1'].apply(vehicle_clean)\n",
    "v_crash_df['VEHICLE TYPE CODE 2'] =  v_crash_df['VEHICLE TYPE CODE 2'].apply(vehicle_clean)\n",
    "v_crash_df['VEHICLE TYPE CODE 3'] =  v_crash_df['VEHICLE TYPE CODE 3'].apply(vehicle_clean)\n",
    "v_crash_df['VEHICLE TYPE CODE 4'] =  v_crash_df['VEHICLE TYPE CODE 4'].apply(vehicle_clean)\n",
    "v_crash_df['VEHICLE TYPE CODE 5'] =  v_crash_df['VEHICLE TYPE CODE 5'].apply(vehicle_clean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df=v_crash_df[v_crash_df['VEHICLE TYPE CODE 1'] != 'nan'] # Remove rows with no vehicle listed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1319734"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(v_crash_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "667"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(v_crash_df['VEHICLE TYPE CODE 1'].unique()) ## 667 unique vehicle types. Too many to bucket."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp={}\n",
    "for i in v_crash_df['VEHICLE TYPE CODE 1'].unique():\n",
    "    temp[i]=len(v_crash_df[v_crash_df['VEHICLE TYPE CODE 1']==i])\n",
    "#checking for the different types of vehicles in an accident. Preparing to group them accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52.999999999999886"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.quantile(list(temp.values()),0.90) # 90% of the vehicle types have counts below 53.0. As such we will focus on the top 10%\n",
    "                                      # of vehicle types. This allows us to more precisely label the vehicle type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_s = pd.Series(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(temp_s)                               ## A majority of Vehicle types are extremly small amounts a vast majority are 1.\n",
    "plt.title('Vehicle Count Distribution')\n",
    "plt.xlabel('Number of Vehicles with specific name') ## stems from humans entering vehicle type and a change in standardizing the \n",
    "plt.savefig('Vehicle Count Distribution')           ## data entry. An imbalance like this will negatively impact our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "vehicle_cull_list = []\n",
    "for i in temp:              ## Cull the 667 vehicle types down to the top 10%. \n",
    "    if temp[i] > 53.0:      ## In total this leaves 67 different types.\n",
    "        vehicle_cull_list.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(vehicle_cull_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating vehicle type Dictionary to map vehicle code to type\n",
    "v_code = 1\n",
    "vehicle_code_dict = {}\n",
    "for i in vehicle_cull_list:\n",
    "    vehicle_code_dict[i] = v_code\n",
    "    v_code += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cull_app(x,cull):\n",
    "    if 'station' in x:\n",
    "        return 4\n",
    "    elif 'ambu' in x:\n",
    "        return 14\n",
    "    elif 'bicycle' in x:\n",
    "        return 19\n",
    "    elif 'fire' in x:\n",
    "        return 27\n",
    "    elif 'tow' in x:\n",
    "        return 15\n",
    "    elif 'fdny' in x:\n",
    "        return 27\n",
    "    elif 'scoot' in x:\n",
    "        return 63\n",
    "    elif 'unkno' in x:\n",
    "        return 66\n",
    "    elif 'box' in x:\n",
    "        return 10\n",
    "    else: \n",
    "        try:\n",
    "            return cull[x]\n",
    "        except KeyError:\n",
    "            return 0\n",
    "        \n",
    "# funtion to apply the vehicle specifc code from the generated dictionary as an integer to a seperate column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df['VEHICLE CODE VALUE 1'] = v_crash_df['VEHICLE TYPE CODE 1'].apply(cull_app,args=(vehicle_code_dict,))\n",
    "# create new Vehicle Code Column based on the type of Vehicle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df = v_crash_df[v_crash_df['VEHICLE CODE VALUE 1'] != 0]\n",
    "# removing NaN's from Dataset for Vehicle one\n",
    "# an accident without a first vehicle does not meet our definiton of an accident. Dropped just over 2,000 values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df['VEHICLE CODE VALUE 2'] = v_crash_df['VEHICLE TYPE CODE 2'].apply(cull_app,args=(vehicle_code_dict,))\n",
    "v_crash_df['VEHICLE CODE VALUE 3'] = v_crash_df['VEHICLE TYPE CODE 3'].apply(cull_app,args=(vehicle_code_dict,))\n",
    "v_crash_df['VEHICLE CODE VALUE 4'] = v_crash_df['VEHICLE TYPE CODE 4'].apply(cull_app,args=(vehicle_code_dict,))\n",
    "v_crash_df['VEHICLE CODE VALUE 5'] = v_crash_df['VEHICLE TYPE CODE 5'].apply(cull_app,args=(vehicle_code_dict,))\n",
    "# adding vehicle code values for each involved vehicle category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "def car_count(x):\n",
    "    vehicle_type = ['VEHICLE CODE VALUE 1','VEHICLE CODE VALUE 2','VEHICLE CODE VALUE 3'\n",
    "                   ,'VEHICLE CODE VALUE 4','VEHICLE CODE VALUE 5']\n",
    "    total = 0\n",
    "    for i in vehicle_type:\n",
    "        if x[i] > 0:\n",
    "            total+=1\n",
    "        else:\n",
    "            pass\n",
    "    return total\n",
    "#Function used to create the Number of Involved vehicles column. Checks if a value is greater than zero.\n",
    "#if so it will add to the total. A zero means no car in that column any number greater than that means it was an\n",
    "#invloved vehicle with a code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df['NUMBER OF VEHICLES'] = v_crash_df.apply(car_count,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "YEAR\n",
       "2019    2\n",
       "2014    2\n",
       "2019    1\n",
       "2014    2\n",
       "2019    2\n",
       "       ..\n",
       "2014    2\n",
       "2014    2\n",
       "2014    2\n",
       "2014    2\n",
       "2014    2\n",
       "Name: NUMBER OF VEHICLES, Length: 1317359, dtype: int64"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v_crash_df['NUMBER OF VEHICLES']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a3eeeffd0>"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(v_crash_df['NUMBER OF VEHICLES'],hue=v_crash_df['INJURY OR DEATH'])\n",
    "# most accidents include 2 vehicles\n",
    "# A lot of imbalance exist in the data between injury or death and none. Most is limitied to 2 car accicdents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_df.reset_index(inplace=True)\n",
    "#reset indicies to allow for a proper merge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df = v_crash_df.merge(weather_df,how='outer',left_on='CRASH DATE',right_on='DATE')\n",
    "#merge daily weather data with daily crash information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "422687"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(v_crash_df['ZIP CODE'].isna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_crash_df=v_crash_df[v_crash_df['ZIP CODE'].isna() == False]\n",
    "#remove rows with missing zip code information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Preparing to Train Models\n",
    "\n",
    "A new dataframe was created after dropping any uneccessary columns that were either one-hot encoded into features or provided incomprehensible data to the model.\n",
    "\n",
    "[Back to Top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 894672 entries, 1 to 1317358\n",
      "Data columns (total 48 columns):\n",
      " #   Column                         Non-Null Count   Dtype         \n",
      "---  ------                         --------------   -----         \n",
      " 0   YEAR                           894672 non-null  int64         \n",
      " 1   CRASH DATE                     894672 non-null  datetime64[ns]\n",
      " 2   CRASH TIME                     894672 non-null  object        \n",
      " 3   ZIP CODE                       894672 non-null  object        \n",
      " 4   LATITUDE                       866039 non-null  float64       \n",
      " 5   LONGITUDE                      866039 non-null  float64       \n",
      " 6   ON STREET NAME                 700525 non-null  object        \n",
      " 7   NUMBER OF PERSONS INJURED      894661 non-null  float64       \n",
      " 8   NUMBER OF PERSONS KILLED       894653 non-null  float64       \n",
      " 9   NUMBER OF PEDESTRIANS INJURED  894672 non-null  int64         \n",
      " 10  NUMBER OF PEDESTRIANS KILLED   894672 non-null  int64         \n",
      " 11  NUMBER OF CYCLIST INJURED      894672 non-null  int64         \n",
      " 12  NUMBER OF CYCLIST KILLED       894672 non-null  int64         \n",
      " 13  NUMBER OF MOTORIST INJURED     894672 non-null  int64         \n",
      " 14  NUMBER OF MOTORIST KILLED      894672 non-null  int64         \n",
      " 15  CONTRIBUTING FACTOR VEHICLE 1  893135 non-null  object        \n",
      " 16  CONTRIBUTING FACTOR VEHICLE 2  763018 non-null  object        \n",
      " 17  CONTRIBUTING FACTOR VEHICLE 3  49063 non-null   object        \n",
      " 18  CONTRIBUTING FACTOR VEHICLE 4  10680 non-null   object        \n",
      " 19  CONTRIBUTING FACTOR VEHICLE 5  2925 non-null    object        \n",
      " 20  VEHICLE TYPE CODE 1            894672 non-null  object        \n",
      " 21  VEHICLE TYPE CODE 2            894672 non-null  object        \n",
      " 22  VEHICLE TYPE CODE 3            894672 non-null  object        \n",
      " 23  VEHICLE TYPE CODE 4            894672 non-null  object        \n",
      " 24  VEHICLE TYPE CODE 5            894672 non-null  object        \n",
      " 25  INJURY OR DEATH                894672 non-null  int64         \n",
      " 26  VEHICLE CODE VALUE 1           894672 non-null  int64         \n",
      " 27  VEHICLE CODE VALUE 2           894672 non-null  int64         \n",
      " 28  VEHICLE CODE VALUE 3           894672 non-null  int64         \n",
      " 29  VEHICLE CODE VALUE 4           894672 non-null  int64         \n",
      " 30  VEHICLE CODE VALUE 5           894672 non-null  int64         \n",
      " 31  NUMBER OF VEHICLES             894672 non-null  int64         \n",
      " 32  index                          894672 non-null  int64         \n",
      " 33  DATE                           894672 non-null  datetime64[ns]\n",
      " 34  AWND                           894672 non-null  float64       \n",
      " 35  PRCP                           894672 non-null  float64       \n",
      " 36  SNOW                           894672 non-null  float64       \n",
      " 37  SNWD                           894672 non-null  float64       \n",
      " 38  TMAX                           894672 non-null  int64         \n",
      " 39  TMIN                           894672 non-null  int64         \n",
      " 40  WDF2                           894672 non-null  float64       \n",
      " 41  WSF2                           894672 non-null  float64       \n",
      " 42  WT01                           894672 non-null  float64       \n",
      " 43  WT02                           894672 non-null  float64       \n",
      " 44  WT03                           894672 non-null  float64       \n",
      " 45  WT04                           894672 non-null  float64       \n",
      " 46  WT06                           894672 non-null  float64       \n",
      " 47  WT08                           894672 non-null  float64       \n",
      "dtypes: datetime64[ns](2), float64(16), int64(17), object(13)\n",
      "memory usage: 334.5+ MB\n"
     ]
    }
   ],
   "source": [
    "v_crash_df.info()\n",
    "model_df=v_crash_df.drop(columns = ['ON STREET NAME','NUMBER OF PERSONS INJURED',\n",
    "                                    'NUMBER OF PERSONS KILLED','NUMBER OF PEDESTRIANS INJURED',\n",
    "                                    'NUMBER OF PEDESTRIANS KILLED','NUMBER OF CYCLIST INJURED',\n",
    "                                    'NUMBER OF CYCLIST KILLED','NUMBER OF MOTORIST INJURED',\n",
    "                                    'NUMBER OF MOTORIST KILLED', 'CONTRIBUTING FACTOR VEHICLE 1',\n",
    "                                   'CONTRIBUTING FACTOR VEHICLE 2','CONTRIBUTING FACTOR VEHICLE 3',\n",
    "                                   'CONTRIBUTING FACTOR VEHICLE 4','CONTRIBUTING FACTOR VEHICLE 5',\n",
    "                                   'VEHICLE TYPE CODE 1','VEHICLE TYPE CODE 2','VEHICLE TYPE CODE 3',\n",
    "                                   'VEHICLE TYPE CODE 4','VEHICLE TYPE CODE 5'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df['YEAR'] = model_df['CRASH DATE'].apply(lambda x: x.year)\n",
    "model_df['MONTH'] = model_df['CRASH DATE'].apply(lambda x: x.month)\n",
    "model_df['DAY'] = model_df['CRASH DATE'].apply(lambda x: x.day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df['CRASH TIME'] = pd.to_datetime(v_crash_df[\"CRASH TIME\"],format='%H:%M:%S')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df['HOUR']=model_df[\"CRASH TIME\"].apply(lambda x: x.hour)\n",
    "model_df['MINUTE']=model_df[\"CRASH TIME\"].apply(lambda x: x.minute)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df = model_df[model_df['ZIP CODE']!='     '] # remove zip codes with blanks not showing up as nan's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model_df['ZIP CODE'] = model_df['ZIP CODE'].apply(lambda x: int(x)) # convert zip code to int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies_zip_code = pd.get_dummies(model_df['ZIP CODE']) # create feature columns for zip code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df = pd.concat([model_df,dummies_zip_code],axis=1) # add zip code feature columns to the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 894652 entries, 1 to 1317358\n",
      "Columns: 264 entries, YEAR to 11697\n",
      "dtypes: datetime64[ns](3), float64(14), int64(16), uint8(231)\n",
      "memory usage: 429.2 MB\n"
     ]
    }
   ],
   "source": [
    "model_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies_vc1 = pd.get_dummies(model_df['VEHICLE CODE VALUE 1'])\n",
    "dummies_vc2 = pd.get_dummies(model_df['VEHICLE CODE VALUE 2'])\n",
    "dummies_vc3 = pd.get_dummies(model_df['VEHICLE CODE VALUE 3'])\n",
    "dummies_vc4 = pd.get_dummies(model_df['VEHICLE CODE VALUE 4'])\n",
    "dummies_vc5 = pd.get_dummies(model_df['VEHICLE CODE VALUE 5'])\n",
    "\n",
    "#transforming Vehicle codes into model readable features using pandas getdummies. This must be done because the vehicle\n",
    "#category is not continous. A vehicle type with code 67 is not technically larger than type with code 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies_vc1.columns = [str(col) + '_vc1' for col in dummies_vc1.columns]\n",
    "dummies_vc2.columns = [str(col) + '_vc2' for col in dummies_vc2.columns]\n",
    "dummies_vc3.columns = [str(col) + '_vc3' for col in dummies_vc3.columns]\n",
    "dummies_vc4.columns = [str(col) + '_vc4' for col in dummies_vc4.columns]\n",
    "dummies_vc5.columns = [str(col) + '_vc5' for col in dummies_vc5.columns]\n",
    "\n",
    "#renaming columns to match with which vehicle code they are a part of"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df = pd.concat([model_df,dummies_vc1,dummies_vc2,dummies_vc3,dummies_vc4,dummies_vc5],axis=1)\n",
    "#adding new dummy columns to the model dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 894652 entries, 1 to 1317358\n",
      "Columns: 490 entries, YEAR to 66_vc5\n",
      "dtypes: datetime64[ns](3), float64(14), int64(16), uint8(457)\n",
      "memory usage: 622.0 MB\n"
     ]
    }
   ],
   "source": [
    "model_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_df = model_df.corr()\n",
    "#sns.heatmap(model_df.corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0_vc2                   0.201178\n",
      "19_vc2                  0.177445\n",
      "67_vc2                  0.161535\n",
      "19_vc1                  0.131193\n",
      "3_vc3                   0.051906\n",
      "21_vc1                  0.051814\n",
      "21_vc2                  0.050525\n",
      "ZIP CODE                0.050147\n",
      "66_vc1                  0.044699\n",
      "6_vc3                   0.043673\n",
      "VEHICLE CODE VALUE 3    0.042809\n",
      "7_vc3                   0.036093\n",
      "3_vc4                   0.034391\n",
      "VEHICLE CODE VALUE 4    0.030762\n",
      "6_vc4                   0.029120\n",
      "67_vc1                  0.026688\n",
      "7_vc4                   0.026461\n",
      "HOUR                    0.026127\n",
      "4_vc3                   0.026094\n",
      "TMIN                    0.024436\n",
      "MINUTE                  0.024274\n",
      "TMAX                    0.023889\n",
      "19_vc3                  0.021765\n",
      "11203                   0.020924\n",
      "Name: INJURY OR DEATH, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(corr_df['INJURY OR DEATH'].sort_values(ascending=False)[1:25])\n",
    "#sns.scatterplot(corr_df)\n",
    "#strongest correlation between Injury or Death is no second vehicle. Feature 0_vc2\n",
    "#Implying most injuries occur in single car incidents\n",
    "#as expected convertibles and bikes and the second most correlated types of vehicle \n",
    "# nothing holds a strong corelation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_corr = corr_df.abs().unstack().sort_values(ascending=False).dropna().drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LONGITUDE             LATITUDE                0.996795\n",
       "TMIN                  TMAX                    0.961525\n",
       "AWND                  WSF2                    0.867843\n",
       "NUMBER OF VEHICLES    0_vc2                   0.791556\n",
       "12_vc4                34_vc5                  0.707106\n",
       "66_vc2                VEHICLE CODE VALUE 2    0.695890\n",
       "19_vc4                19_vc5                  0.680411\n",
       "66_vc3                VEHICLE CODE VALUE 3    0.674497\n",
       "VEHICLE CODE VALUE 4  66_vc4                  0.664798\n",
       "0_vc3                 NUMBER OF VEHICLES      0.637653\n",
       "0_vc5                 VEHICLE CODE VALUE 5    0.593402\n",
       "VEHICLE CODE VALUE 4  0_vc4                   0.570746\n",
       "3_vc5                 0_vc5                   0.552975\n",
       "0_vc3                 VEHICLE CODE VALUE 3    0.552511\n",
       "3_vc4                 0_vc4                   0.547003\n",
       "66_vc5                VEHICLE CODE VALUE 5    0.546609\n",
       "YEAR                  7_vc1                   0.526887\n",
       "0_vc4                 0_vc5                   0.521224\n",
       "3_vc3                 0_vc3                   0.518908\n",
       "NUMBER OF VEHICLES    0_vc4                   0.502666\n",
       "VEHICLE CODE VALUE 5  61_vc5                  0.488615\n",
       "VEHICLE CODE VALUE 1  66_vc1                  0.485107\n",
       "61_vc1                VEHICLE CODE VALUE 1    0.479683\n",
       "0_vc4                 7_vc4                   0.479118\n",
       "dtype: float64"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_corr[1:25]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bus : 1\n",
      "livery vehicle : 2\n",
      "sedan : 3\n",
      "sport utility / station wagon : 4\n",
      "taxi : 5\n",
      "station wagon/sport utility vehicle : 6\n",
      "passenger vehicle : 7\n",
      "ambul : 8\n",
      "tractor truck diesel : 9\n",
      "box truck : 10\n",
      "pick-up truck : 11\n",
      "flat bed : 12\n",
      "limo : 13\n",
      "ambulance : 14\n",
      "tow truck / wrecker : 15\n",
      "dump : 16\n",
      "van : 17\n",
      "refrigerated van : 18\n",
      "bike : 19\n",
      "convertible : 20\n",
      "motorcycle : 21\n",
      "garbage or refuse : 22\n",
      "carry all : 23\n",
      "tractor truck gasoline : 24\n",
      "chassis cab : 25\n",
      "lift boom : 26\n",
      "fire truck : 27\n",
      "armored truck : 28\n",
      "4 dr sedan : 29\n",
      "beverage truck : 30\n",
      "concrete mixer : 31\n",
      "tanker : 32\n",
      "usps : 33\n",
      "pk : 34\n",
      "2 dr sedan : 35\n",
      "e-sco : 36\n",
      "e-bik : 37\n",
      "school bus : 38\n",
      "moped : 39\n",
      "motorscooter : 40\n",
      "utili : 41\n",
      "trail : 42\n",
      "3-door : 43\n",
      "firet : 44\n",
      "flat rack : 45\n",
      "tow t : 46\n",
      "stake or rack : 47\n",
      "snow plow : 48\n",
      "fire : 49\n",
      "scoot : 50\n",
      "schoo : 51\n",
      "unkno : 52\n",
      "truck : 53\n",
      "fdny : 54\n",
      "deliv : 55\n",
      "motorbike : 56\n",
      "comme : 57\n",
      "tract : 58\n",
      "com : 59\n",
      "ambu : 60\n",
      "other : 61\n",
      "large com veh(6 or more tires) : 62\n",
      "scooter : 63\n",
      "box t : 64\n",
      "small com veh(4 tires)  : 65\n",
      "unknown : 66\n",
      "bicycle : 67\n"
     ]
    }
   ],
   "source": [
    "for i in vehicle_code_dict:\n",
    "    print(i,':',vehicle_code_dict[i])\n",
    "#print vehicle dictionary to understand correlation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Training and Evaluation\n",
    "\n",
    "Each model is instantiated and fitted to a randomly undersampled and balanced dataset. K-Fold cross-validation and Randomized grid search are used to evaluate and tune each model.\n",
    "\n",
    "[Back to Top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score, cross_val_predict, RandomizedSearchCV\n",
    "from sklearn.metrics import confusion_matrix,classification_report, accuracy_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from collections import Counter\n",
    "from imblearn.under_sampling import RandomUnderSampler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = model_df.drop(columns = ['DATE','CRASH DATE','CRASH TIME','INJURY OR DEATH','ZIP CODE','LATITUDE','LONGITUDE',\n",
    "                            'VEHICLE CODE VALUE 1','VEHICLE CODE VALUE 2','VEHICLE CODE VALUE 3',\n",
    "                             'VEHICLE CODE VALUE 4','VEHICLE CODE VALUE 5','YEAR'],axis=0)\n",
    "y = model_df['INJURY OR DEATH']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_before = Counter(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({0: 728597, 1: 166055})"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counter_before # we can see heavy imbalance towards 0. Good for incidents bad for modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "un_samp = RandomUnderSampler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_samp, y_samp = un_samp.fit_resample(X,y)\n",
    "counter_after = Counter(y_samp)\n",
    "#Random undersampling of dataset. We have a large amount of data so some deletion is okay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({0: 166055, 1: 166055})"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counter_after # can see that data is now balanced"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Training\n",
    "\n",
    "The balanced data is fit onto each model type. \n",
    "\n",
    "[Back to Top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_samp,y_samp,random_state=42,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtree_reg = DecisionTreeClassifier().fit(X_train,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=3).fit(X_train,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "gauss_nb = GaussianNB().fit(X_train,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "ran_for = RandomForestClassifier(n_estimators=100).fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_list=[dtree_reg,gauss_nb,ran_for,knn] # used to hold each model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Evaluation\n",
    "\n",
    "A few differne metrics are reviewed to determine the best model before tuning. Using Cross Validation, confusion matrices and accuracy scores we can gather a clear picture of which model is best at extracting value from the data.\n",
    "\n",
    "[Back to Top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier : 0.6176266899521243\n",
      "GaussianNB : 0.6278040408298455\n",
      "RandomForestClassifier : 0.6837493601517569\n",
      "KNeighborsClassifier : 0.5208966908554394\n"
     ]
    }
   ],
   "source": [
    "for i in model_list:\n",
    "    temp = i.predict(X_test)\n",
    "    print(type(i).__name__,':',accuracy_score(y_test,temp))\n",
    "    \n",
    "#print model type and accuracy score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Note\n",
    "\n",
    "The accuracy score is not the most effective metric for this problem. If a highly accurate model miss classifiers accidents with harm as no harm this can lead to an increase in traffic fatalities. More weight is given to the recall of each model. In this case being wrong can be tolerated if the wrong guess is far more likely to send officers to a scene with no injury."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.62      0.62     33198\n",
      "           1       0.62      0.61      0.62     33224\n",
      "\n",
      "    accuracy                           0.62     66422\n",
      "   macro avg       0.62      0.62      0.62     66422\n",
      "weighted avg       0.62      0.62      0.62     66422\n",
      " \n",
      "\n",
      "GaussianNB \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.64      0.59      0.61     33198\n",
      "           1       0.62      0.66      0.64     33224\n",
      "\n",
      "    accuracy                           0.63     66422\n",
      "   macro avg       0.63      0.63      0.63     66422\n",
      "weighted avg       0.63      0.63      0.63     66422\n",
      " \n",
      "\n",
      "RandomForestClassifier \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.66      0.76      0.71     33198\n",
      "           1       0.72      0.61      0.66     33224\n",
      "\n",
      "    accuracy                           0.68     66422\n",
      "   macro avg       0.69      0.68      0.68     66422\n",
      "weighted avg       0.69      0.68      0.68     66422\n",
      " \n",
      "\n",
      "KNeighborsClassifier \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.55      0.53     33198\n",
      "           1       0.52      0.50      0.51     33224\n",
      "\n",
      "    accuracy                           0.52     66422\n",
      "   macro avg       0.52      0.52      0.52     66422\n",
      "weighted avg       0.52      0.52      0.52     66422\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in model_list:\n",
    "    temp = i.predict(X_test)\n",
    "    print(type(i).__name__,'\\n',classification_report(y_test,temp),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in model_list:\n",
    "    temp = i.predict(X_test)\n",
    "    print(type(i).__name__,'\\n',classification_report(y_test,temp),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "h=0\n",
    "v=0\n",
    "f,ax=plt.subplots(2,2,figsize=(15,10))\n",
    "for i in model_list:\n",
    "    #y_pred = cross_val_predict(i,X,y,cv=10)\n",
    "    y_pred = i.predict(X_test)\n",
    "    sns.heatmap(confusion_matrix(y_test,y_pred),ax=ax[v,h],annot=True,fmt='2.0f')\n",
    "    ax[v,h].set_title('Confusion Matrix for {}'.format(type(i).__name__))\n",
    "    ax[v,h].set_xlabel('True Values')\n",
    "    ax[v,h].set_ylabel('Predicted Values')\n",
    "    h+=1\n",
    "    if h>1:\n",
    "        h = 0\n",
    "        v=1\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Note\n",
    "\n",
    "Based on our Confusion Matrix the Random Forest Model is our best performer. Roughly 60% of its misclassified values are in the safe option of predicting harm when none occurs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier : KFold Completed\n",
      "GaussianNB : KFold Completed\n",
      "RandomForestClassifier : KFold Completed\n",
      "KNeighborsClassifier : KFold Completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cross Validation Mean</th>\n",
       "      <th>Std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DecisionTreeClassifier</th>\n",
       "      <td>0.613694</td>\n",
       "      <td>0.002187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNB</th>\n",
       "      <td>0.658194</td>\n",
       "      <td>0.010651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForestClassifier</th>\n",
       "      <td>0.610062</td>\n",
       "      <td>0.003773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNeighborsClassifier</th>\n",
       "      <td>0.497710</td>\n",
       "      <td>0.002036</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Cross Validation Mean       Std\n",
       "DecisionTreeClassifier               0.613694  0.002187\n",
       "GaussianNB                           0.658194  0.010651\n",
       "RandomForestClassifier               0.610062  0.003773\n",
       "KNeighborsClassifier                 0.497710  0.002036"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kfold = KFold(n_splits=5) # k=5, split the data into 5 equal parts\n",
    "mean = []\n",
    "accuracy = []\n",
    "std = []\n",
    "classifiers = []\n",
    "for i in model_list:\n",
    "    cv_result = cross_val_score(i,X_train,y_train, cv = kfold,scoring = \"recall\",n_jobs=-1)\n",
    "    mean.append(cv_result.mean())\n",
    "    std.append(cv_result.std())\n",
    "    accuracy.append(cv_result)\n",
    "    classifiers.append(type(i).__name__)\n",
    "    print(type(i).__name__,': KFold Completed')\n",
    "cross_val_df = pd.DataFrame({'Cross Validation Mean':mean,'Std':std},index=classifiers)       \n",
    "cross_val_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Note\n",
    "\n",
    "Cross Validation was run on all four algorithms and the above data frame shows the mean and standard deviation for the recall of each machine. Based on this data it appears the Gaussian Naive-Bayes model performs best."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Model Tuning\n",
    "\n",
    "Randomized Grid Search will be used on the two best perfoming models based on Cross Validation. This will help to find the best hyperparameters to extract the most value from our dataset. Since GaussianNB does not have any hyperparameters to tune we will focus on the Random Forest algorithm and see if its performance can match or exceed GaussianNB.\n",
    "\n",
    "[Back to Top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "kfold_grid = KFold(n_splits=5)\n",
    "n_estimators = [int(x) for x in np.linspace(start = 0, stop = 200, num = 5)]\n",
    "max_depth = [int(x) for x in np.linspace(10, 100, num = 5)]\n",
    "max_depth.append(None)\n",
    "min_samples_split = [2, 5, 10]\n",
    "min_samples_leaf = [1, 2, 4]\n",
    "bootstrap = [True, False]\n",
    "random_grid = {'n_estimators': n_estimators,\n",
    "               'max_features': max_features,\n",
    "               'max_depth': max_depth,\n",
    "               'min_samples_split': min_samples_split,\n",
    "               'min_samples_leaf': min_samples_leaf,\n",
    "               'bootstrap': bootstrap}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [],
   "source": [
    "ran_grid = RandomizedSearchCV(estimator=ran_for,\n",
    "                              param_distributions=random_grid,\n",
    "                              cv=kfold_grid,\n",
    "                              n_jobs=-1,n_iter=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=KFold(n_splits=5, random_state=None, shuffle=False),\n",
       "                   estimator=RandomForestClassifier(), n_iter=5, n_jobs=-1,\n",
       "                   param_distributions={'bootstrap': [True, False],\n",
       "                                        'max_depth': [10, 32, 55, 77, 100,\n",
       "                                                      None],\n",
       "                                        'max_features': ['auto', 'sqrt'],\n",
       "                                        'min_samples_leaf': [1, 2, 4],\n",
       "                                        'min_samples_split': [2, 5, 10],\n",
       "                                        'n_estimators': [0, 50, 100, 150, 200]})"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ran_grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 150,\n",
       " 'min_samples_split': 10,\n",
       " 'min_samples_leaf': 4,\n",
       " 'max_features': 'auto',\n",
       " 'max_depth': 77,\n",
       " 'bootstrap': False}"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ran_grid.best_params_ # find best parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6952139264179302"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ran_grid.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "ran_for_best = RandomForestClassifier(n_estimators=150,\n",
    "                                     min_samples_split = 10,\n",
    "                                     min_samples_leaf = 4,\n",
    "                                     max_features = 'auto',\n",
    "                                     max_depth = 77,\n",
    "                                     bootstrap= False,n_jobs=-1).fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions_best = ran_for_best.predict(X_test)\n",
    "predictions_base = ran_for.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Base RandomForestClassifier\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.66      0.71     38076\n",
      "           1       0.61      0.72      0.66     28346\n",
      "\n",
      "    accuracy                           0.68     66422\n",
      "   macro avg       0.68      0.69      0.68     66422\n",
      "weighted avg       0.69      0.68      0.69     66422\n",
      "\n",
      "Best Params RandomForestClassifier\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.66      0.72     40498\n",
      "           1       0.59      0.75      0.66     25924\n",
      "\n",
      "    accuracy                           0.69     66422\n",
      "   macro avg       0.69      0.70      0.69     66422\n",
      "weighted avg       0.72      0.69      0.70     66422\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Base RandomForestClassifier\")\n",
    "print(classification_report(predictions_base,y_test))\n",
    "print(\"Best Params RandomForestClassifier\")\n",
    "print(classification_report(predictions_best,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "ran_for_cv = cross_val_score(ran_for,X_train,y_train,cv=kfold,n_jobs=-1,scoring='recall')\n",
    "ran_for_best_cv = cross_val_score(ran_for_best,X_train,y_train,cv=kfold,n_jobs=-1,scoring='recall')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall Cross Validation Mean for Base Random Forest: 0.6106622974242121\n",
      "Recall Cross Validation Mean for Best Param Random Forest: 0.5843209384460373\n"
     ]
    }
   ],
   "source": [
    "print('Recall Cross Validation Mean for Base Random Forest:',ran_for_cv.mean())\n",
    "print('Recall Cross Validation Mean for Best Param Random Forest:',ran_for_best_cv.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.5 Results\n",
    "\n",
    "Through the process of cleaning and transforming vehicle crash data and combining it with availble weather data I was able to build a model that can predict crash outcomes with 69% accuracy. \n",
    "\n",
    "The best performing model falls way short of the 90% threshold. With the Random Forest Classifier performing the best with a recall of 75% and accuracy of 69%. The model could not be deployed at that level when dealing with human lives. \n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "Machine learning is an extremly powerful tool. Even though, it is limited by the quality of the data provided to the machine. In the case of this project the data was sufficeint for a cursory test of my hypothesis. I believe with more specific data the models can be tuned to reach the 90% threshold. Collecting more crash information combined with hyperlocal weather data will certainly help the model. Also, standardizing the way vehicle information is reported would create a cleaner dataset that will ultimately produce a better model.\n",
    "\n",
    "[Back to top](#Table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
